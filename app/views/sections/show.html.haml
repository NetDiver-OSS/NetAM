- page_title "<strong>#{@section.name.upcase}</strong> - <small>#{@section.network}</small>"

- page_action({icon: icon_with_text('pencil-square', _('Edit')), path: edit_section_path(@section)}) if can? :edit, @section
- page_action({icon: icon_with_text('search', _('Scan')), path: section_scan_path(@section), method: 'post'}) if can? :scan, @section
- page_action({icon: icon_with_text('download', _('Export')), path: section_export_path(@section.id), method: 'post'}) if can? :export, @section
- page_action({icon: icon('plus'), path: new_section_usage_path(@section.id)}) if can? :edit, @section


- if params[:scan_id]
  - status = NetAM::Scanner.status(params[:scan_id])
  - unless status.nil?
    %div.content-header
      - case status
      - when :queued
        = render partial: 'sections/status/notification', locals: { type: 'dark', title: _('Scan Queued'), message: '' }
      - when :working
        = render partial: 'sections/status/notification', locals: { type: 'info', title: _('Scan in progress'), message: '' }
      - when :complete
        = render partial: 'sections/status/notification', locals: { type: 'success', title: _('Scan complete'), message: '' }
      -  else
        = render partial: 'sections/status/notification', locals: { type: 'warning', title: _('Unknown state'), message: '' }

%div.row
  - last_scan = NetAM::Section.get_last_scan(@section.id).to_i
  %div{class: last_scan == 0 ? 'col-6' : 'col-4' }
    %div.card
      %div.card-body.text-center
        %h5.card-title= _('Section VLAN')
        %p.card-text= '%{name} (VID %{vid})' % { name: @section.vlan_name, vid: @section.vlan_vid }

  %div{class: last_scan == 0 ? 'col-6' : 'col-4' }
    %div.card
      %div.card-body.text-center
        %h5.card-title= _('Affected worker')
        %p.card-text
          - unless @section.worker.nil?
            = @section.worker_name
          - else
            = _('No worker assigned')

  - unless last_scan == 0
    %div.col-4
      %div.card
        %div.card-body.text-center
          %h5.card-title= _('Last scan time')
          %p.card-text= Time.at(last_scan)

  %div.col-6
    %div.row
      %div.col-6.mt-3
        %div.card
          %div.card-body.text-center
            %h5.card-title= _('Locked')
            %p.card-text= number_with_delimiter @ip_locked

      %div.col-6.mt-3
        %div.card
          %div.card-body.text-center
            %h5.card-title= _('Activated')
            %p.card-text= number_with_delimiter @ip_activated

      %div.col-6.mt-3
        %div.card
          %div.card-body.text-center
            %h5.card-title= _('Down')
            %p.card-text= number_with_delimiter @ip_down

      %div.col-6.mt-3
        %div.card
          %div.card-body.text-center
            %h5.card-title= _('DHCP')
            %p.card-text= number_with_delimiter @ip_dhcp

    %div.row
      %div.col-12.mt-3
        %div.card
          %div.card-body.text-center
            %h5.card-title= _('Free IP')
            %div.row.card-text
              %div.col-11
                %div.progress
                  %div.progress-bar{style: "width: #{(@ip_free * 100 / IPAddress(@section.network).size)}%"}
                    = "#{(@ip_free * 100 / IPAddress(@section.network).size)}%"

              %p.col-1= number_with_delimiter @ip_free

  %div.col-6
    %canvas#donutChart{style: "height:230px; min-height:230px"}

%div.row.mt-4
  %div.card.p-0.w-100
    %div.card-header.py-0.border-bottom-0
      %ul.nav.nav-tabs#custom-tabs-three-tab{class: dark_mode_class, role: 'tablist'}
        %li.nav-item
          %a.nav-link.active#address-table-tab{class: dark_mode_class, role: 'tab', href: '#address-table', data: {toggle: 'pill'}, aria: {controls: 'address-table', selected: 'false'}}= _('Address Table')
        - if IPAddress(@section.network).ipv4? && IPAddress(@section.network).prefix >= 24
          %li.nav-item
            %a.nav-link#address-matrix-tab{class: dark_mode_class, role: 'tab', href: '#address-matrix', data: {toggle: 'pill'}, aria: {controls: 'address-matrix', selected: 'true'}}= _('Address Matrix')

    %div.card-body{class: dark_mode_class}
      %div.tab-content#custom-tabs-three-tabContent
        - if IPAddress(@section.network).ipv4? && IPAddress(@section.network).prefix >= 24
          %div.tab-pane.fade#address-matrix{role: "tabpanel", aria: {labelledby: "address-matrix-tab"}}
            %div.d-flex.flex-wrap.justify-content-between
            - NetAM::Network::Range.new(@section.network).all_ips.each do |address|
              - ip_usage = @all_ip_used.filter_map { |entry| entry if entry[1].to_s == address.to_s }.first
              %a.btn.btn-flat.text-center{class: "#{dark_mode_class} text-#{ip_usage.nil? ? 'dark' : usage_color(ip_usage[2])}", style: 'padding: 0;width: 35px', href: ip_usage.nil? ? new_section_usage_path(@section.id, {ip: address}) : edit_section_usage_path(@section, ip_usage[0])}
                %small= NetAM::Network::Range.clean_display(address)
                %br
                = icon('circle-fill')

        %div.tab-pane.fade.show.active#address-table{role: "tabpanel", aria: {labelledby: "address-table-tab"}}
          %table.table.table-bordered.table-striped
            %thead
              %tr
                %th= _('FQDN')
                %th= _('IP Address')
                %th= _('Description')
                %th= _('State')
                %th.w-25
            %tbody.align-baseline
              - @section.usages.order("inet(ip_used) ASC").each do |usage|
                %tr
                  %td= usage.fqdn
                  %td= usage.ip_used
                  %td= usage.description
                  %td #{usage&.state.capitalize} #{usage_icon(usage&.state)}
                  %td
                    %div.btn-group
                      = link_to icon_with_text('search', _('Scan')), section_usage_scan_path(@section, usage), method: :post, class: 'btn btn-primary btn-sm' if can? :scan, @section
                      = link_to icon_with_text('pencil-square', _('Edit')), edit_section_usage_path(@section, usage), class: 'btn btn-secondary btn-sm', data: {:content => 'Edit'} if can? :edit, @section
                      = link_to icon_with_text('trash', _('Release')), section_usage_path(@section, usage), method: :delete, data: { confirm: _('Are you sure?') }, class: 'btn btn-danger btn-sm' if can? :destroy, @section

:javascript
    var donutChartCanvas = document.getElementById('donutChart').getContext('2d')
    var donutData = {
      labels: #{@chart_label},
      datasets: [
        {
          data: #{@chart_data},
          backgroundColor: #{@chart_color},
        }
      ]
    }
    var donutOptions = {
      maintainAspectRatio: false,
      responsive: true,
    }
    //Create pie or douhnut chart
    // You can switch between pie and douhnut using the method below.
    var donutChart = new Chart(donutChartCanvas, {
      type: 'doughnut',
      data: donutData,
      options: donutOptions
    })
