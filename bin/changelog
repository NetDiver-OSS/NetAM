#!/usr/bin/env ruby
require 'optparse'
require 'yaml'

module ChangelogHelpers
  Abort = Class.new(StandardError)
  Done = Class.new(StandardError)
end

class ChangelogOptionParser
  extend ChangelogHelpers

  Options = Struct.new(
    :type,
    :title,
    :author,
    :merge_request,
    :issue
  )

  def self.parse(args)
    options = Options.new

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{__FILE__} [options]"

      opts.on("-t", "--type [string]", "Category of the change") do |value|
        options.type = value
      end

      opts.on('-m', '--merge-request [integer]', Integer, 'Merge Request ID') do |value|
        options.merge_request = value
      end

      opts.on('-i', '--issue [integer]', Integer, 'Issue ID') do |value|
        options.issue = value
      end

      opts.on('-h', '--help', 'Print help message') do
        puts opts
        raise ChangelogHelpers::Done
      end
    end

    opt_parser.parse!(args)

    options.title = args.join(' ').strip
    options.author = ENV.fetch('USER') { '' }

    options
  end
end

class ChangelogEntry
  extend ChangelogHelpers

  attr_reader :options

  def initialize(options)
    @options = options
  end

  def run!
    puts content

    File.write(file_path, content)
  end

  private

  def file_path
    base_path = File.join(
      'changelog',
      'unreleased',
      @options.title.downcase.gsub(/[^\w-]/, '-')
    )

    base_path[0..90] + '.yml'
  end

  def content
    YAML.dump(
      'type' => options.type,
      'title' => options.title,
      'author' => options.author,
      'merge_request' => options.merge_request,
      'issue' => options.issue
    )
  end
end


if $0 == __FILE__
  begin
    options = ChangelogOptionParser.parse(ARGV)
    ChangelogEntry.new(options).run!
  rescue ChangelogHelpers::Abort => e
    warn e.message
    exit 1
  rescue ChangelogHelpers::Done
    exit
  end
end

# vim: ft=ruby
